# 本配置文件主要介绍了外部化配置相关内容
spring.application.name=config-file-demo

# 在Spring Boot 2.4中，配置文件的加载顺序受到了改变。配置参数是按照在配置文件中定义的顺序加载的，
# 而不是基于"profiles"的激活顺序。

# springboot 中配置文件的优先级
## 不同后缀配置文件的优先级：properties (最高) > yml > yaml (最低)

# springboot 中配置文件所在路径的加载顺序（从高到低），配置的生效顺序是从低到高，因为后加载的会覆盖掉先加载的
## 类路径：classpath:/
## 类路径下的 config 目录：classpath:/config/
## 当前项目根目录：file:./
## 当前项目根目录下的 config 目录的子目录：file:./config/*/
## 当前项目根目录下的 config 目录：file:./config/

# 配置文件名，默认是 application，如果这里设置了值，将会使用这里设置的
#spring.config.name=configFile
# 指定配置文件所在的位置，这个配置会替换默认的扫描路径，支持配置以逗号（英文半角）分隔的多个路径。
# 如果配置多个路径，有相同配置的话，后面的路径会覆盖前面的路径
# 配置的路径必须是文件夹路径，所以必须以 / 结尾，因为会将 ${spring.config.name} 拼接到后面，如果不加 /，路径就是错误的
# 如果配置了该项，那么会覆盖默认的路径（classpath:/，classpath:/config/等）
#spring.config.location=D:/config/file/
# 和 ${spring.config.location} 不同之处在于，如果配置了该项不会覆盖默认的路径（classpath:/，classpath:/config/等）
# 所以该项可以作为默认路径的补充，但是优先级比默认的路径高
#spring.config.additional-location=D:/config/file/

# 当前配置文件可以导入其他配置文件
# application-config.properties 配置文件中将 “optional:file:./dev.properties” 配置文件导入到了 springboot 应用程序中，
# 如果有相同的属性，${spring.config.import} 中的会覆盖 application-config.properties 中的。
#spring.config.import=optional:file:./dev.properties
# 如果配置文件没有扩展名，但是文件里面的是 yaml 格式，可以像下面这样配置给 springboot 一个提示，就可以按照 yaml 解析该配置文件。
# spring.config.import=file:/etc/config/myconfig[.yaml]
# 对于文件名是 key，文件中内容是 value 的这种配置方式，可以使用下面这种
#spring.config.import=optional:configtree:C:/Tools/JavaTools/JetBrains/IdeaProjects/spring-projects/spring-boot/spring-boot-demo/src/main/resources/config/tree/myapp/

# 配置文件路径如果已 “optional:” 开头，例如：optional:file:./myconfig.properties，即使该路径下的文件不存在程序启动时候也不会报错
# ${spring.config.location}、${spring.config.additional-location} 和 ${spring.config.import} 都支持这样配置


# ignore 表示 springboot 应用中指定的配置文件路径下面都没有找到配置文件，程序也不会报错，能正常启动
# 当设置为 ignore 时，springboot 会使用 SpringApplication#setDefaultProperties() 中配置的信息
# 或者使用 system/environment 变量
spring.config.on-not-found=ignore